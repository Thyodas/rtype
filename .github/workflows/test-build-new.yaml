name: CI/CD

on:
  workflow_call:
  push:
    branches-ignore:
      - main

env:
  BUILD_TYPE: Debug
  SERV_BIN: rtype_server
  CLIENT_BIN: rtype_client
  VCPKG_COMMIT: 04f7d34c26defd9a54397dcbbb26b1ce3573614d
  VCPKG_DISABLE_METRICS: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      # Install clang-tidy
      - name: Install clang-tidy
        run: |
          sudo apt-get update -y
          sudo apt-get install clang-tidy -y

      # Run clang-tidy
      - name: Run clang-tidy
        run: |
          #!/bin/bash
          set -o pipefail
          EXIT_STATUS=0
          for file in $(find src -name '*.cpp' -o -name '*.h')
          do
            clang-tidy "$file" -- -Iinclude || EXIT_STATUS=$?
          done
          if [ $EXIT_STATUS -ne 0 ]; then
            echo "Clang-tidy reported issues"
            exit $EXIT_STATUS
          fi
        shell: bash

  build:
    needs: lint
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        platform: [ windows-latest, ubuntu-latest ]
        include:
          - platform: windows-latest
            triplet: x64-windows
          - platform: ubuntu-latest
            triplet: x64-linux-dynamic
    runs-on: ${{ matrix.platform }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    steps:
      # System dependencies for Linux -
      - name: Install system deps for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 42D5A192B819C5DA
          sudo apt update
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install -y ninja-build libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev autoconf libtool libopenal-dev libalut-dev libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
          sudo apt-get install -y software-properties-common lsb-release
          sudo apt-key adv --fetch-keys 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          sudo apt-get install -y cmake
          sudo apt install gcc-10 g++-10 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
          cmake --version

      # Checkout code
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      # Set up vcpkg for Linux
      - name: Set up vcpkg (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
          fi
        shell: bash

      # Set up vcpkg for Windows
      - name: Set up vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          if (!(Test-Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.gita
            .\vcpkg\bootstrap-vcpkg.bat
          }
        shell: pwsh

      - name: List contents of the vcpkg directory (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path .\vcpkg\ -Force
        shell: pwsh

      - name: Bootstrap vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          .\vcpkg\bootstrap-vcpkg.bat
        shell: pwsh

      - name: List contents of the vcpkg directory after bootstrap (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path .\vcpkg\ -Force
        shell: pwsh

      - name: Set execution permission for bootstrap script
        if: matrix.platform == 'ubuntu-latest'
        run: chmod +x vcpkg/bootstrap-vcpkg.sh

      # Install dependencies with vcpkg (Windows)
      - name: Install dependencies with vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          .\vcpkg\vcpkg install
        shell: pwsh

      # Install dependencies with vcpkg (Linux)
      - name: Install dependencies with vcpkg (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "No need to install dependencies with vcpkg on Linux"
        shell: bash

      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          choco install ninja cmake
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"

      - name: Configure
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            VCPKG_TOOLCHAIN_PATH="D:/a/B-CPP-500-STG-5-2-rtype-remi.mergen/B-CPP-500-STG-5-2-rtype-remi.mergen/vcpkg/scripts/buildsystems/vcpkg.cmake"
            SFML_DIR="D:/a/B-CPP-500-STG-5-2-rtype-remi.mergen/B-CPP-500-STG-5-2-rtype-remi.mergen/vcpkg/installed/x64-windows/share/sfml"
            CMAKE_GENERATOR="Visual Studio 17 2022"
          else
            VCPKG_TOOLCHAIN_PATH="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            SFML_DIR="${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/share/sfml"
            CMAKE_GENERATOR="Unix Makefiles"
          fi
          
          cmake -B build && cmake --build build
        working-directory: ${{ github.workspace }}
        shell: bash

      - name: Build
        run: |
          echo "Using host CMake version: ${CMAKE_VERSION}"
          
          # Execute CMake commands
          cmake -B build
          cmake --build build
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            # Define WORKSPACE_DIR
            WORKSPACE_DIR="${{ github.workspace }}/build/Debug"
          
            echo "Using WORKSPACE_DIR: $WORKSPACE_DIR"
          
            # Check if the executables are present
            if [ ! -f "$WORKSPACE_DIR/client.exe" ] || [ ! -f "$WORKSPACE_DIR/server.exe" ]; then
              echo "Build failed: Executables not found."
              exit 1
            fi
          fi
        working-directory: ${{ github.workspace }}
        shell: bash

      - name: Upload client and server binaries as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: |
            build/client
            build/server
